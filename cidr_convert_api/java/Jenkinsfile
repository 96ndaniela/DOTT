pipeline { // start
	agent any
	environment { // starts environment: needed for sonarcloud and security without token at sight
		SONAR_TOKEN = credentials("sonarcloud")
		SONAR_MAVEN_GOAL=credentials("sonarcloud")
	} // ends environment
	stages { // start stage 
		stage('step one: building') { // build the environment only
			steps { // start steps
				dir("/var/lib/jenkins/workspace/DOTTmultibranch_master/cidr_convert_api/java/cidr-api") { // within directory, you'll do...
					script { // start script
						sh 'pwd'
						sh 'mvn package'
						} // end script
					}// end in the directory
				} // end steps
			} // end stage one
		
		stage('step two: testing') { // start stage
			steps { // start steps
				dir("/var/lib/jenkins/workspace/DOTTmultibranch_master@2/cidr_convert_api/java/cidr-api") { // within directory
					script { // start script
					try { // specific java unit tests 
						sh 'mvn test'
   					 } catch (Exception e) {
      					echo 'it was a failure, showing reports:'						
						// so it skips, because it's all a fail
  						} // exception
						sh 'cat target/surefire-reports/TEST-*.xml'
						} // end of script
					} // directory	
				} // end of steps
			} // end stage
	
			stage('step three: sonarcloud') { //start stage  
				steps { // start step
					 dir("cidr_convert_api/java/cidr-api/") {
						withSonarQubeEnv('sonarcloud') 
						{ // start sqe
							sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
							sh '-Dsonar.coverage.jacoco.xmlReportPaths=*/target/surefire-reports/TEST-*.xml'
						} // close sqe
						} // close dir
					sh 'echo "it has been connected to sonarcloud"'
					}// close steps
			} // close stage
		
		stage('step four: gate quality') {// start stage 
		steps{ // steps
			sh 'pwd'
			sh 'echo "checking through the quality gate"'
		timeout(time: 1, unit: 'HOURS') {  // timeout
		waitForQualityGate abortPipeline: true } // close timeout
		} // close steps
		} // close stage

		 
		
		stage('step four: linting') { // linting process used through org.maven.plugins, which has the Programming Mistake Detector
			steps { // start steps 
				dir("/var/lib/jenkins/workspace/DOTTmultibranch_master/cidr_convert_api/java/cidr-api/") { // within directory
				sh 'pwd'
				sh 'mvn pmd:pmd' } // end directory
				dir("/var/lib/jenkins/workspace/DOTTmultibranch_master/cidr_convert_api/java/cidr-api/target") { //within this directory that now has the linting report
				sh 'cat pmd.xml' }  // this part is only to show what the errors are within java itself
				} // end of steps
			} // end of stage
			
			stage('step five: deployment') { // start of stage
				steps { // start steps
					dir("cidr_convert_api/java/cidr-api/"){ // dir
						script{ // script
							sh 'chmod +x help.sh'
							sh './help.sh'   } // script
					} // end the directory
                		} // end steps
		 
		
		} // end stage five
		
    } // end stages
} // end pipeline

